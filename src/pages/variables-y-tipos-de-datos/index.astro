---
import Layout from "@/layouts/Layout.astro";
import Editor from "@/components/Editor.astro";
import QuickNote from "@/components/QuickNote.astro";

import Collapsible from "@/components/Collapsible.astro";
---

<Layout
    title="Variables y tipos de datos"
    description="Un playground de JavaScript"
>
    <main>
        <h1>Variables y tipos de datos</h1>

        <h2>Variables</h2>
        <p>
            Una variable es un contenedor de información. Cada variable tiene un
            nombre y un valor.
        </p>

        <p>
            Nos sirvirá para almacenar valores que utilizaremos posteriormente.
        </p>

        <QuickNote title="Nota" bgcolor="#f0f0f0">
            Presiona en el icono de "play" para ejecutar el código.
        </QuickNote>

        <div id="goal">
            <QuickNote title="Siguiente objetivo" bgcolor="#A6FF96">
                <div id="goal-description"></div>
                <div id="clues-box">
                    <Collapsible title="Dame una pista">
                        <div id="goal-clues"></div>
                    </Collapsible>
                </div>
            </QuickNote>
        </div>

        <Editor code=`let nombre = "Pedro";
console.log('Nombre:', nombre);` />
    </main>
</Layout>

<script>
    
    import {
        //@ts-ignore
        consoleIs,
        //@ts-ignore
        definesVariable,
        //@ts-ignore
        variablePrinted,
    } from "@/scripts/goal-checker.mjs";

    const goals = [
        {
            name: "Definir una variable",
            description:
                "Observa el siguiente ejemplo con atención y luego presiona en el icono de 'play' para ejecutar el código.",
            completed: false,
            successMessage:
                "Hemos definido una variable 'nombre' con el valor 'Pedro' y esto lo imprimos por consola.",
            test: () => consoleIs("Nombre: Pedro"),
        },
        {
            name: "Crear una nueva variable",
            description:
                "Ahora te toca a vos, define una variable 'apellido' con el valor 'Torres' y muestra su valor en la consola.",
            completed: false,
            successMessage:
                "Genial! Ahora ya sabes como crear variables y como utilizar su contenido.",
            test: () => {
                const expectedVariable = {
                    type: "let",
                    name: "apellido",
                    value: "Torres",
                };
                return (
                    definesVariable(expectedVariable) &&
                    variablePrinted(expectedVariable)
                );
            },
            clues: [
                "Para definir una variable usamos la palabra 'let' seguido del nombre de la variable",
                "Para asignar el valor utilizamos el operador '=' (asignación) seguido del valor",
                "Para leer el valor simplemente escribimos el nombre de la variable",
                "Ten en cuenta las mayúsculas y minúsculas",
                "Usa el formato del ejemplo",
            ],
        },
    ];

    let currentGoal = 0;

    const outputElement = document.querySelector(".console");

    const setGoal = (index: number) => {
        currentGoal = index;

        const goalDescription = document.querySelector("#goal-description");

        if (goalDescription) {
            goalDescription.textContent = goals[currentGoal].description;
        }

        const goalClues = document.querySelector("#goal-clues");

        if (goalClues) {
            goalClues.innerHTML = "";

            if (goals[currentGoal].clues) {
                if (Array.isArray(goals[currentGoal].clues)) {
                    // @ts-ignore
                    goals[currentGoal].clues.forEach((clue) => {
                        const li = document.createElement("li");
                        li.textContent = clue;
                        goalClues.appendChild(li);
                    });

                    const cluesBox = document.querySelector("#clues-box");
                    if (cluesBox && cluesBox.classList.contains("hidden")) {
                        cluesBox.classList.remove("hidden");
                    }
                }
            } else {
                const cluesBox = document.querySelector("#clues-box");
                if (cluesBox && !cluesBox.classList.contains("hidden")) {
                    cluesBox.classList.add("hidden");
                }
            }
        }
    };

    const finishLesson = () => {
        console.log("Objetivos completados");
    };

    const observer = new MutationObserver(() => {
        const cmContent = document.querySelector(".cm-content");

        if (!cmContent) {
            console.error("No se encontro el elemento 'cmContent'");
            return;
        }

        if (goals[currentGoal].test()) {
            goals[currentGoal].completed = true;
            if (currentGoal < goals.length - 1) {
                setGoal(currentGoal + 1);
            } else {
                finishLesson();
            }
        }
    });

    // First goal
    setGoal(0);

    if (outputElement) {
        observer.observe(outputElement, { childList: true, subtree: true });
    } else {
        console.error("No se encontro el elemento 'outputElement'");
    }
</script>

<style>
    .hidden {
        display: none;
    }

    mark {
        background-color: #f0f0f0;
        padding: 0 2px;
    }
</style>
